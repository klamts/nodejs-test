const fs = require('fs');
const path = require('path');

// L·∫•y t√™n file t·ª´ tham s·ªë d√≤ng l·ªánh
const fileName = process.argv[2];
if (!fileName) {
  console.error('‚ùå Vui l√≤ng truy·ªÅn t√™n file JSON.\nV√≠ d·ª•: node checkWordText.js ourworld1_unit9.json');
  process.exit(1);
}

const filePath = path.join(__dirname, fileName);

console.log(`üü¢ ƒêang ki·ªÉm tra file: ${filePath}`);

fs.readFile(filePath, 'utf8', (err, jsonData) => {
  if (err) {
    console.error(`‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file: ${filePath}`);
    process.exit(1);
  }

  try {
    const parsed = JSON.parse(jsonData);

    const keys = Object.keys(parsed).filter(k => k.startsWith('unit'));
    if (keys.length === 0) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y key b·∫Øt ƒë·∫ßu b·∫±ng "unit" trong JSON.');
      process.exit(1);
    }

    keys.forEach(key => {
      const words = parsed[key];
      if (!Array.isArray(words)) {
        console.error(`‚ùå Key "${key}" kh√¥ng ch·ª©a m·∫£ng.`);
        return;
      }

      console.log(`üîç Ki·ªÉm tra key "${key}" (${words.length} m·ª•c):`);

      let errorCount = 0;

      words.forEach((word, idx) => {
        if (!word || typeof word.word_text !== 'string' || word.word_text.trim() === '') {
          console.error(`‚ùå M·ª•c ${idx + 1} b·ªã thi·∫øu ho·∫∑c tr·ªëng "word_text":`, word);
          errorCount++;
        }
      });

      if (errorCount === 0) {
        console.log(`‚úÖ T·∫•t c·∫£ m·ª•c trong "${key}" ƒë·ªÅu c√≥ "word_text".`);
      } else {
        console.log(`‚ö†Ô∏è T·ªïng c·ªông ${errorCount} m·ª•c b·ªã l·ªói trong "${key}".`);
      }
    });
  } catch (err) {
    console.error('‚ùå L·ªói ph√¢n t√≠ch JSON:', err.message);
    process.exit(1);
  }
});
