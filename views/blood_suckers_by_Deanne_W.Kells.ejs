
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>üó£Ô∏è Luy·ªán ph√°t √¢m t·ª´ v·ª±ng</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      padding: 20px;
      background: #f0f2f5;
      color: #333;
    }
    h1, h2 {
      text-align: center;
      color: #0056b3;
    }
    .word-card {
      background: white;
      padding: 20px;
      margin: 20px auto;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      max-width: 600px;
    }
    .word-card h2 {
      color: #007bff;
      font-size: 2em;
    }
    .word-details {
      text-align: center;
      color: #555;
    }
    .ipa-compare {
      font-family: 'Courier New', monospace;
      margin-top: 10px;
      font-size: 1.1em;
    }
    .match {
      color: green;
    }
    .mismatch {
      color: red;
      text-decoration: underline;
    }
    .buttons-container {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 15px;
    }
    button {
      padding: 8px 15px;
      border-radius: 20px;
      border: none;
      background-color: #28a745;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    button:hover {
      background-color: #218838;
    }
    .result {
      text-align: center;
      margin-top: 10px;
      font-weight: bold;
    }
    .correct { color: #28a745; }
    .incorrect { color: #dc3545; }
    .progress-bar {
      width: 100%;
      height: 10px;
      display: none;
      margin-top: 10px;
    }
    table {
      width: 100%;
      margin-top: 30px;
      border-collapse: collapse;
    }
    th, td {
      padding: 8px;
      border: 1px solid #ccc;
      text-align: left;
    }
    th {
      background-color: #e0e0e0;
    }
    .result.correct {
      color: green;
    }

    .result.incorrect {
      color: red;
    }

    .expected-word {
      font-weight: bold;
      color: #007bff;
    }

    .user-word {
      font-weight: bold;
      color: #ff5722;
    }
    .image-container img {
      max-width: 200px;
      margin: 10px auto;
      display: block;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
  </style>
</head>
<body>
  


  

  <h1>üó£Ô∏è Luy·ªán ph√°t √¢m t·ª´ v·ª±ng</h1>
  <input type="text" class="learner-name" placeholder="T√™n c·ªßa b·∫°n">
  <label for="voiceSelect">üîä Ch·ªçn gi·ªçng ƒë·ªçc: </label>
  <select id="voiceSelect"></select>
  <% words.forEach(word => { %>
    <div class="word-card" data-word="<%= word.word_text.toLowerCase() %>">
      <h2><%= word.word_text %></h2>
      <div class="word-details">
        <span><%= word.meaning_vi %></span><br>
        <span><i><%= word.ipa %></i> | <%= word.pos %></span>
      </div>
      <% if (word.image_url) { %>
        <div class="image-container">
          <img src="/<%= word.image_url %>" alt="<%= word.word_text %>">
        </div>
      <% } %>
      <p><b>VD:</b> <i><%= word.example_en %></i><br><%= word.example_vi %></p>
      <div class="buttons-container">
        <input type="hidden" class="expected-word" value="<%= word.word_text %>">
        <button onclick="speak('<%= word.word_text %>')">üîä Nghe ph√°t √¢m</button>
        <button onclick="recordAndSend(this)">üéôÔ∏è N√≥i th·ª≠</button>
        <button class="replay-button" onclick="replayRecording(this)" disabled>üîÅ Nghe l·∫°i</button>
      </div>
      <progress class="progress-bar" value="0" max="100"></progress>
      <div class="result"></div>
      <div class="ipa-compare"></div>
    </div>
  <% }); %>

  <h2>L·ªãch s·ª≠ luy·ªán t·∫≠p</h2>
  <table id="historyTable">
    <thead>
      <tr><th>T·ª´</th><th>B·∫°n n√≥i</th><th>ƒêi·ªÉm</th><th>K·∫øt qu·∫£</th></tr>
    </thead>
    <tbody></tbody>
  </table>
  <audio id="soundCorrect" src="/sounds/correct.mp3"></audio>
  <audio id="soundWrong" src="/sounds/wrong.mp3"></audio>
  <script>
    let voices = [];

    function loadVoices() {
  voices = speechSynthesis.getVoices();
  const voiceSelect = document.getElementById("voiceSelect");
  voiceSelect.innerHTML = '';

  let defaultIndex = 0;

    voices.forEach((voice, i) => {
        const option = document.createElement("option");
        option.value = i;
        option.textContent = `${voice.name} (${voice.lang})`;
        voiceSelect.appendChild(option);

        // G√°n ch·ªâ s·ªë n·∫øu tr√πng v·ªõi Microsoft Ana
        if (
          voice.name === "Microsoft Ana Online (Natural)" &&
          voice.lang === "en-US"
        ) {
          defaultIndex = i;
        }
      });

      voiceSelect.selectedIndex = 114;
    }

    // ƒê·∫£m b·∫£o ch·∫°y khi danh s√°ch voice c√≥ s·∫µn
    if (speechSynthesis.getVoices().length === 0) {
      speechSynthesis.onvoiceschanged = loadVoices;
    } else {
      loadVoices();
    }

    // C√≥ browsers c·∫ßn ƒë·ª£i
    speechSynthesis.onvoiceschanged = loadVoices;
    // V√≠ d·ª•: URL hi·ªán t·∫°i l√† "/practice/unit8"
    const currentPath = window.location.pathname; 
    const unitMatch = currentPath.match(/\/practice\/(unit\d+)/);
    const unit = unitMatch ? unitMatch[1] : 'unit8'; // fallback n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c

    
    function speak(text) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = "en-US";
      const selectedIndex = parseInt(document.getElementById("voiceSelect")?.value);
      if (voices[selectedIndex]) {
        utterance.voice = voices[selectedIndex];
      }
      speechSynthesis.speak(utterance);
    }


    function replayRecording(button) {
      const card = button.closest('.word-card');
      const blobUrl = card.dataset.blobUrl;
      if (blobUrl) new Audio(blobUrl).play();
    }

// ‚úÖ Ghi √¢m v√† nh·∫≠n d·∫°ng, kh√¥ng g·ª≠i l√™n server
// ‚úÖ Ghi √¢m v√† nh·∫≠n d·∫°ng, kh√¥ng g·ª≠i l√™n server
async function recordAndSend(button) {
  const card = button.closest('.word-card');
  const expectedElem = card.querySelector('.expected-word');
  const expectedWord = expectedElem?.dataset.word?.toLowerCase() || expectedElem?.value?.toLowerCase() || '';
  const learnerName = document.querySelector('.learner-name')?.value || '·∫®n danh';
  const resultElem = card.querySelector('.result');
  const progressBar = card.querySelector('.progress-bar');
  const replayButton = card.querySelector('.replay-button');
  const ipaCompareElem = card.querySelector('.ipa-compare');

  if (!expectedWord) {
    alert('‚ùó Kh√¥ng t√¨m th·∫•y t·ª´ c·∫ßn luy·ªán t·∫≠p (expectedWord). Ki·ªÉm tra l·∫°i HTML.');
    return;
  }

  if (!learnerName || learnerName.trim() === '') {
    alert('Vui l√≤ng nh·∫≠p t√™n tr∆∞·ªõc khi luy·ªán t·∫≠p.');
    return;
  }

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  if (!SpeechRecognition) {
    alert("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ Speech Recognition.");
    return;
  }

  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    const mediaRecorder = new MediaRecorder(stream);
    const chunks = [];

    const recognition = new SpeechRecognition();
    recognition.lang = "en-US";
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    resultElem.textContent = 'üé§ ƒêang ghi √¢m v√† nh·∫≠n d·∫°ng...';
    resultElem.className = 'result';
    progressBar.style.display = 'block';
    progressBar.value = 10;

    const statusElem = card.querySelector(".recording-status");
    if (statusElem) {
      statusElem.textContent = "üî¥ ƒêang ghi √¢m...";
      statusElem.classList.add("blinking");
    }

    mediaRecorder.ondataavailable = e => chunks.push(e.data);
    mediaRecorder.onstop = () => {
      const blob = new Blob(chunks, { type: 'audio/webm' });
      const url = URL.createObjectURL(blob);
      card.dataset.blobUrl = url;
      replayButton.disabled = false;

      progressBar.value = 100;
      setTimeout(() => progressBar.style.display = 'none', 1000);

      if (statusElem) {
        statusElem.textContent = "";
        statusElem.classList.remove("blinking");
      }
    };

    recognition.onresult = (event) => {
      const spoken = event.results[0][0].transcript.trim();
      const said = spoken.toLowerCase().replace(/[.?!]$/g, '').trim();
      const isCorrect = said === expectedWord;

      if (isCorrect) {
        resultElem.innerHTML = `‚úÖ ƒê√∫ng r·ªìi!<br>üó£Ô∏è B·∫°n n√≥i: <strong>${spoken}</strong>`;
        resultElem.className = 'result correct';
        document.getElementById("soundCorrect").play(); // ‚úÖ ph√°t √¢m ƒë√∫ng
      } else {
        resultElem.innerHTML = `‚ùå Sai r·ªìi. B·∫°n n√≥i: <strong>${spoken}</strong><br>‚úÖ T·ª´ ƒë√∫ng l√†: <strong>${expectedWord}</strong>`;
        resultElem.className = 'result incorrect';
        document.getElementById("soundWrong").play();   // ‚ùå ph√°t √¢m sai
      }
    };

    recognition.onerror = () => {
      resultElem.textContent = "‚ùå L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i.";
      resultElem.className = 'result incorrect';
    };

    mediaRecorder.start();
    recognition.start();

    setTimeout(() => {
      mediaRecorder.stop();
      recognition.stop();
    }, 4000);

  } catch (err) {
    alert('L·ªói ghi √¢m ho·∫∑c nh·∫≠n di·ªán: ' + err.message);
  }
}

async function recordAndSend(button) {
  const card = button.closest('.word-card');
  const expectedElem = card.querySelector('.expected-word');
  const expectedWord = expectedElem?.dataset.word?.toLowerCase() || expectedElem?.value?.toLowerCase() || '';
  const learnerName = document.querySelector('.learner-name')?.value || '·∫®n danh';
  const resultElem = card.querySelector('.result');
  const progressBar = card.querySelector('.progress-bar');
  const replayButton = card.querySelector('.replay-button');
  const ipaCompareElem = card.querySelector('.ipa-compare');

  if (!expectedWord) {
    alert('‚ùó Kh√¥ng t√¨m th·∫•y t·ª´ c·∫ßn luy·ªán t·∫≠p (expectedWord). Ki·ªÉm tra l·∫°i HTML.');
    return;
  }

  if (!learnerName || learnerName.trim() === '') {
    alert('Vui l√≤ng nh·∫≠p t√™n tr∆∞·ªõc khi luy·ªán t·∫≠p.');
    return;
  }

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  if (!SpeechRecognition) {
    alert("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ Speech Recognition.");
    return;
  }

  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    const mediaRecorder = new MediaRecorder(stream);
    const chunks = [];

    const recognition = new SpeechRecognition();
    recognition.lang = "en-US";
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    resultElem.textContent = 'üé§ ƒêang ghi √¢m v√† nh·∫≠n d·∫°ng...';
    resultElem.className = 'result';
    progressBar.style.display = 'block';
    progressBar.value = 10;

    const statusElem = card.querySelector(".recording-status");
    if (statusElem) {
      statusElem.textContent = "üî¥ ƒêang ghi √¢m...";
      statusElem.classList.add("blinking");
    }

    mediaRecorder.ondataavailable = e => chunks.push(e.data);
    mediaRecorder.onstop = () => {
      const blob = new Blob(chunks, { type: 'audio/webm' });
      const url = URL.createObjectURL(blob);
      card.dataset.blobUrl = url;
      replayButton.disabled = false;

      progressBar.value = 100;
      setTimeout(() => progressBar.style.display = 'none', 1000);

      if (statusElem) {
        statusElem.textContent = "";
        statusElem.classList.remove("blinking");
      }
    };

    recognition.onresult = (event) => {
      const spoken = event.results[0][0].transcript.trim();
      const said = spoken.toLowerCase().replace(/[.?!]$/g, '').trim();
      const isCorrect = said === expectedWord;

      if (isCorrect) {
        resultElem.innerHTML = `‚úÖ ƒê√∫ng r·ªìi!<br>üó£Ô∏è B·∫°n n√≥i: <strong>${spoken}</strong>`;
        resultElem.className = 'result correct';
        document.getElementById("soundCorrect").play(); // ‚úÖ ph√°t √¢m ƒë√∫ng
      } else {
        resultElem.innerHTML = `‚ùå Sai r·ªìi. B·∫°n n√≥i: <strong>${spoken}</strong><br>‚úÖ T·ª´ ƒë√∫ng l√†: <strong>${expectedWord}</strong>`;
        resultElem.className = 'result incorrect';
        document.getElementById("soundWrong").play();   // ‚ùå ph√°t √¢m sai
      }
    };

    recognition.onerror = () => {
      resultElem.textContent = "‚ùå L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i.";
      resultElem.className = 'result incorrect';
    };

    mediaRecorder.start();
    recognition.start();

    setTimeout(() => {
      mediaRecorder.stop();
      recognition.stop();
    }, 4000);

  } catch (err) {
    alert('L·ªói ghi √¢m ho·∫∑c nh·∫≠n di·ªán: ' + err.message);
  }
}

  </script>
</body>
</html>