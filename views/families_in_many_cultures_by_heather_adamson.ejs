<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ƒê·ªçc S√°ch v√† Ki·ªÉm Tra Ph√°t √Çm</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
            background-color: #f0f0f0;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        button {
            padding: 10px 20px;
            margin: 5px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
        }
        button:hover {
            background-color: #45a049;
        }
        #sentence, #result {
            margin: 10px 0;
            font-size: 18px;
        }
        select, input[type="range"] {
            margin: 10px;
        }
        #recordIndicator {
            width: 20px;
            height: 20px;
            margin: 10px auto;
            border-radius: 50%;
            background-color: red;
            animation: blink 1s infinite;
            display: none; /* ·∫©n m·∫∑c ƒë·ªãnh */
        }

        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0; }
            100% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ƒê·ªçc S√°ch v√† Ki·ªÉm Tra Ph√°t √Çm</h1>

        <div>
            <label for="voiceSelect">üéôÔ∏è Ch·ªçn gi·ªçng ƒë·ªçc:</label>
            <select id="voiceSelect"></select>
        </div>
        <div>
            <label for="rate">üöÄ T·ªëc ƒë·ªô: <span id="rateValue">1</span></label><br>
            <input type="range" id="rate" min="0.5" max="2" value="1" step="0.1">
        </div>
        <div>
            <label for="pitch">üéµ Cao ƒë·ªô: <span id="pitchValue">1</span></label><br>
            <input type="range" id="pitch" min="0" max="2" value="1" step="0.1">
        </div>

        <p id="sentence">Families in Many Cultures by Heather Adamson.</p>
        <button onclick="speak()">Ph√°t √Çm</button>
        <button onclick="startRecognition()">Ki·ªÉm Tra Ph√°t √Çm</button>
        <p id="result"></p>
        <button onclick="playUserAudio()">üîÅ Nghe l·∫°i gi·ªçng b·∫°n</button>
        <button onclick="nextSentence()">C√¢u ti·∫øp</button>
        <div id="recordIndicator" title="ƒêang ghi √¢m..."></div>
    </div>

    <script>
        const sentences = [
            "Families in Many Cultures by Heather Adamson.",
            "Families of all sizes live around the world.",
            "Families help each other.",
            "Families share meals.",
            "Families celebrate holidays.",
            "Families celebrate birthdays.",
            "Families play together.",
            "Families laugh together.",
            "What is your family like?."
        ];
        let currentIndex = 0;

        const synth = window.speechSynthesis;
        const voiceSelect = document.getElementById('voiceSelect');
        let voices = [];

        function populateVoices() {
            voices = synth.getVoices();
            voiceSelect.innerHTML = '';
            voices.forEach((voice, index) => {
                const option = document.createElement('option');
                option.textContent = `${voice.name} (${voice.lang})`;
                option.value = index;
                voiceSelect.appendChild(option);
            });
        }

        populateVoices();
        if (speechSynthesis.onvoiceschanged !== undefined) {
            speechSynthesis.onvoiceschanged = populateVoices;
        }

        function speak() {
            const utterance = new SpeechSynthesisUtterance(sentences[currentIndex]);
            utterance.lang = 'en-US';
            const selectedVoice = voices[114];
            if (selectedVoice) {
                utterance.voice = selectedVoice;
            }
            utterance.rate = parseFloat(document.getElementById('rate').value);
            utterance.pitch = parseFloat(document.getElementById('pitch').value);
            synth.speak(utterance);
        }

        document.getElementById('rate').addEventListener('input', function () {
            document.getElementById('rateValue').textContent = this.value;
        });

        document.getElementById('pitch').addEventListener('input', function () {
            document.getElementById('pitchValue').textContent = this.value;
        });

        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
        recognition.lang = 'en-US';
        recognition.interimResults = false;
        recognition.maxAlternatives = 1;

        async function startRecognition() {
    const recordIndicator = document.getElementById('recordIndicator');
    recordIndicator.style.display = 'block'; // Hi·ªán v√≤ng tr√≤n

    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    audioChunks = [];
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
    };
    mediaRecorder.onstop = () => {
        userAudioBlob = new Blob(audioChunks, { type: 'audio/webm' });
        recordIndicator.style.display = 'none'; // ·∫®n sau khi ghi xong
    };
    mediaRecorder.start();

    recognition.start();
    recognition.onresult = (event) => {
        const spokenText = event.results[0][0].transcript.toLowerCase();
        const correctText = sentences[currentIndex].toLowerCase();
        if (spokenText === correctText) {
            document.getElementById('result').innerText = "‚úÖ ƒê√∫ng! Ph√°t √¢m t·ªët!";
        } else {
            document.getElementById('result').innerText = `‚ùå Sai: "${spokenText}". ƒê√∫ng l√†: "${sentences[currentIndex]}"`;
        }
    };
    recognition.onerror = () => {
        document.getElementById('result').innerText = "‚ö†Ô∏è L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i.";
        recordIndicator.style.display = 'none';
    };
    recognition.onend = () => {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
            mediaRecorder.stop();
        }
    };
}

    function playUserAudio() {
        if (userAudioBlob) {
            const audioURL = URL.createObjectURL(userAudioBlob);
            const userAudio = new Audio(audioURL);
            userAudio.play();
        } else {
            alert("‚ùó B·∫°n ch∆∞a ghi √¢m gi·ªçng n√≥i.");
        }
    }

        function nextSentence() {
            currentIndex = (currentIndex + 1) % sentences.length;
            document.getElementById('sentence').innerText = sentences[currentIndex];
            document.getElementById('result').innerText = "";
        }
    </script>
</body>
</html>
