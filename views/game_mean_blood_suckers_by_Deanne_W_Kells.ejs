<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Game Nối Từ Với Nghĩa</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/leader-line"></script>
  <style>
    .has-connection { background-color: #f0fdf4; }
  </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen flex items-center justify-center p-4">
  <div class="bg-white rounded-2xl shadow-xl p-6 w-full max-w-6xl">
    <h1 class="text-2xl font-bold text-center mb-6 text-indigo-600">🎯 Nối Từ Với Nghĩa</h1>
    <div class="grid grid-cols-3 gap-6 relative">
      <div class="space-y-2">
        <h2 class="text-lg font-semibold text-indigo-700 mb-2">📝 Từ</h2>
        <div id="words" class="space-y-2 border rounded p-2 min-h-[300px] bg-gray-50"></div>
      </div>
      <div class="space-y-2">
        <h2 class="text-lg font-semibold text-indigo-700 mb-2">💡 Nghĩa</h2>
        <div id="meanings" class="space-y-2 border rounded p-2 min-h-[300px] bg-gray-50"></div>
      </div>
      <div class="space-y-2">
        <h2 class="text-lg font-semibold text-indigo-700 mb-2">🔗 Danh sách nối</h2>
        <div id="connectionsList" class="space-y-2 border rounded p-2 min-h-[300px] bg-gray-50"></div>
      </div>
    </div>
    <div class="mt-6 text-center space-x-2">
      <button onclick="checkAnswers()" class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition">✅ Kiểm tra</button>
      <button onclick="clearAllConnections()" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition">🗑 Xóa tất cả</button>
      <p id="result" class="mt-4 text-lg font-semibold"></p>
    </div>
  </div>

  <script>
    const allWords = <%- JSON.stringify(words) %>;

    const selectedWords = allWords
      .sort(() => Math.random() - 0.5)
      .slice(0, 5);

    const wordsContainer = document.getElementById("words");
    const meaningsContainer = document.getElementById("meanings");
    const connectionsList = document.getElementById("connectionsList");

    selectedWords.forEach((w, i) => {
      const div = document.createElement("div");
      div.className = "p-2 border rounded cursor-pointer bg-white hover:bg-indigo-50";
      div.dataset.index = i;
      div.textContent = w.word_text;
      div.onclick = () => selectWord(i, div);
      wordsContainer.appendChild(div);
    });

    const shuffledMeanings = [...selectedWords].sort(() => Math.random() - 0.5);
    shuffledMeanings.forEach((w, i) => {
      const div = document.createElement("div");
      div.className = "p-2 border rounded cursor-pointer bg-white hover:bg-indigo-50";
      div.dataset.index = i;
      div.textContent = w.meaning_en;
      div.onclick = () => selectMeaning(i, div);
      meaningsContainer.appendChild(div);
    });

    let currentWord = null;
    const connections = [];
    const colors = ['#F59E0B', '#10B981', '#3B82F6', '#EC4899', '#8B5CF6'];

    function selectWord(index, element) {
      clearSelection("words");
      currentWord = { index, element };
      element.classList.add("ring-2", "ring-indigo-400");
    }

    function selectMeaning(index, element) {
      if (!currentWord) {
        alert("Chọn từ trước.");
        return;
      }

      const meaningText = element.textContent.trim();
      const existing = connections.find(c => c.meaningElement.isSameNode(element));
      if (existing) {
        alert("Nghĩa này đã được nối. Hãy xóa trước khi chọn lại.");
        return;
      }

      clearSelection("meanings");
      element.classList.add("ring-2", "ring-indigo-400");

      const color = colors[connections.length % colors.length];
      const line = new LeaderLine(
        LeaderLine.areaAnchor(currentWord.element),
        LeaderLine.areaAnchor(element),
        { color: color, size: 2 }
      );

      const connDiv = document.createElement("div");
      connDiv.className = "flex items-center justify-between bg-white border p-2 rounded hover:bg-gray-50 transition";
      connDiv.textContent = `${currentWord.element.textContent} → ${meaningText}`;
      const delBtn = document.createElement("button");
      delBtn.textContent = "❌";
      delBtn.className = "text-red-500 hover:text-red-700 font-bold";
      delBtn.onclick = () => {
        removeConnection(c);
        connDiv.remove();
      };
      connDiv.appendChild(delBtn);
      connectionsList.appendChild(connDiv);

      const c = {
        wordIndex: currentWord.index,
        meaningText,
        wordElement: currentWord.element,
        meaningElement: element,
        line,
        connDiv
      };
      connections.push(c);

      currentWord = null;
    }

    function removeConnection(c) {
      c.line.remove();
      c.wordElement.classList.remove("ring-2", "ring-indigo-400");
      c.meaningElement.classList.remove("ring-2", "ring-indigo-400");
      const idx = connections.indexOf(c);
      if (idx >= 0) connections.splice(idx, 1);
    }

    function clearSelection(type) {
      const container = type === "words" ? wordsContainer : meaningsContainer;
      container.querySelectorAll(".ring-2").forEach(el => el.classList.remove("ring-2", "ring-indigo-400"));
    }

    function checkAnswers() {
      let correct = 0;
      connections.forEach(c => {
        const expected = selectedWords[c.wordIndex].meaning_en;
        if (c.meaningText === expected) {
          correct++;
          c.line.setOptions({ color: 'green' });
        } else {
          c.line.setOptions({ color: 'red' });
        }
      });
      document.getElementById("result").textContent = `Bạn đúng ${correct}/${selectedWords.length} cặp.`;
    }

    function clearAllConnections() {
      connections.forEach(c => {
        c.line.remove();
        c.connDiv.remove();
      });
      connections.length = 0;
      document.getElementById("result").textContent = "";
    }
  </script>
</body>
</html>
