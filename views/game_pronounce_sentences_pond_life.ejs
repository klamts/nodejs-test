<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>Game Ph√°t √Çm C√¢u</title>
<script src="https://cdn.tailwindcss.com"></script>
<style>
  .success { color: green; }
  .error { color: red; }
</style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen flex items-center justify-center p-4">
<div class="bg-white rounded-2xl shadow-xl p-6 w-full max-w-3xl text-center">
  <h1 class="text-2xl font-bold text-indigo-600 mb-4">üé§ Game Ph√°t √Çm C√¢u</h1>
  <div id="sentence" class="text-xl font-semibold text-gray-800 mb-4"></div>
  <div class="space-x-2 mb-4">
    <button onclick="startRecognition()" class="bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600">üéô B·∫Øt ƒë·∫ßu n√≥i</button>
    <button onclick="checkPronunciation()" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">‚úÖ Ki·ªÉm tra</button>
    <button onclick="playUserAudio()" class="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600">üîä Nghe l·∫°i</button>
    <button onclick="playSampleSentence()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">üîà Nghe c√¢u m·∫´u</button>
    <button onclick="prevSentence()" class="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400">‚èÆÔ∏è Quay l·∫°i</button>
    <button onclick="nextSentence()" class="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400">‚è≠Ô∏è Ti·∫øp</button>
  </div>
  <div id="status" class="mb-2"></div>
  <div id="progress" class="text-sm text-gray-500"></div>
</div>

<script>
const sentences = <%- JSON.stringify(sentences) %>;
let currentIndex = 0;
let recognition;
let recordedTranscript = "";
  let voices = [];

    function loadVoices() {
  voices = speechSynthesis.getVoices();
  const voiceSelect = document.getElementById("voiceSelect");
  voiceSelect.innerHTML = '';

 let defaultIndex = 129;

voices.forEach((voice, i) => {
  const option = document.createElement("option");
  option.value = i;
  option.textContent = `${voice.name} (${voice.lang})`;
  voiceSelect.appendChild(option);

  // G√°n ch·ªâ s·ªë n·∫øu tr√πng v·ªõi Microsoft Ana
  if (
    voice.name === "Microsoft Ana Online (Natural)" &&
    voice.lang === "en-US"
  ) {
    defaultIndex = i;
  }
});

voiceSelect.selectedIndex = defaultIndex;
} 

    // ƒê·∫£m b·∫£o ch·∫°y khi danh s√°ch voice c√≥ s·∫µn
    if (speechSynthesis.getVoices().length === 0) {
      speechSynthesis.onvoiceschanged = loadVoices;
    } else {
      loadVoices();
    }

    // C√≥ browsers c·∫ßn ƒë·ª£i
    speechSynthesis.onvoiceschanged = loadVoices;
function loadSentence() {
  if (currentIndex < 0) currentIndex = 0;
  if (currentIndex >= sentences.length) {
    document.querySelector("#sentence").textContent = "üéâ Ho√†n th√†nh t·∫•t c·∫£ c√¢u!";
    document.querySelector("#status").textContent = "";
    document.querySelector("#progress").textContent = "";
    return;
  }
  document.querySelector("#sentence").textContent = sentences[currentIndex].source_phrase;
  document.querySelector("#status").textContent = "Nh·∫•n B·∫Øt ƒë·∫ßu n√≥i.";
  document.querySelector("#progress").textContent = `C√¢u ${currentIndex + 1}/${sentences.length}`;
}

function startRecognition() {
  if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
    alert('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Speech Recognition API.');
    return;
  }
  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  recognition = new SpeechRecognition();
  recognition.lang = 'en-US';
  recognition.interimResults = false;
  recognition.maxAlternatives = 1;
  recognition.start();
  document.querySelector("#status").textContent = "üé§ ƒêang nghe...";

  recognition.onresult = (event) => {
    recordedTranscript = event.results[0][0].transcript.trim();
    document.querySelector("#status").textContent = `B·∫°n n√≥i: "${recordedTranscript}"`;
  };

  recognition.onerror = (event) => {
    document.querySelector("#status").textContent = "‚ùå L·ªói nh·∫≠n d·∫°ng. Th·ª≠ l·∫°i.";
  };
}

function checkPronunciation() {
  const target = sentences[currentIndex].source_phrase.toLowerCase().replace(/[.,!?]/g, "");
  const spoken = recordedTranscript.toLowerCase().replace(/[.,!?]/g, "");
  if (!spoken) {
    document.querySelector("#status").innerHTML = '<span class="error">B·∫°n ch∆∞a n√≥i c√¢u.</span>';
    return;
  }
  if (spoken === target) {
    document.querySelector("#status").innerHTML = '<span class="success">‚úÖ ƒê√∫ng r·ªìi!</span>';
  } else {
    document.querySelector("#status").innerHTML = `<span class="error">‚ùå Ch∆∞a ch√≠nh x√°c.<br>B·∫°n n√≥i: "${recordedTranscript}"</span>`;
  }
}

function nextSentence() {
  currentIndex++;
  loadSentence();
}

function prevSentence() {
  currentIndex--;
  loadSentence();
}

function playUserAudio() {
  if (!recordedTranscript) {
    document.querySelector("#status").textContent = "B·∫°n ch∆∞a n√≥i c√¢u.";
    return;
  }
  const utter = new SpeechSynthesisUtterance(recordedTranscript);
  utter.lang = 'en-US';
  window.speechSynthesis.speak(utter);
}

function playSampleSentence() {
  const text = sentences[currentIndex].source_phrase;
  // Thay th·∫ø d·∫•u nh√°y ' b·∫±ng k√Ω t·ª± Unicode ƒë·ªÉ TTS ƒë·ªçc t·ªët h∆°n
  const cleanText = text.replace(/'/g, "‚Äô"); // thay ' b·∫±ng ‚Äô
   const utterance = new SpeechSynthesisUtterance(cleanText);
  utterance.lang = "en-US";

  const selectedIndex = parseInt(document.getElementById("voiceSelect")?.value);
  if (voices[130]) {
    utterance.voice = voices[130];
  }

  speechSynthesis.speak(utterance);
}


window.onload = loadSentence;
</script>
</body>
</html>
