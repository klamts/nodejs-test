<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>üó£Ô∏è Luy·ªán ph√°t √¢m t·ª´ v·ª±ng</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      padding: 20px;
      background: #f0f2f5;
      color: #333;
    }
    h1, h2 {
      text-align: center;
      color: #0056b3;
    }
    .word-card {
      background: white;
      padding: 20px;
      margin: 20px auto;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      max-width: 600px;
    }
    .word-card h2 {
      color: #007bff;
      font-size: 2em;
    }
    .word-details {
      text-align: center;
      color: #555;
    }
    .buttons-container {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 15px;
    }
    button {
      padding: 8px 15px;
      border-radius: 20px;
      border: none;
      background-color: #28a745;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    button:hover {
      background-color: #218838;
    }
    .result {
      text-align: center;
      margin-top: 10px;
      font-weight: bold;
    }
    .correct { color: #28a745; }
    .incorrect { color: #dc3545; }
    .progress-bar {
      width: 100%;
      height: 10px;
      display: none;
      margin-top: 10px;
    }
    table {
      width: 100%;
      margin-top: 30px;
      border-collapse: collapse;
    }
    th, td {
      padding: 8px;
      border: 1px solid #ccc;
      text-align: left;
    }
    th {
      background-color: #e0e0e0;
    }
  </style>
</head>
<body>
  <h1>üó£Ô∏è Luy·ªán ph√°t √¢m t·ª´ v·ª±ng</h1>

  <% words.forEach(word => { %>
    <div class="word-card" data-word="<%= word.word_text.toLowerCase() %>">
      <h2><%= word.word_text %></h2>
      <div class="word-details">
        <span><%= word.meaning_vi %></span><br>
        <span><i><%= word.ipa %></i> | <%= word.pos %></span>
      </div>
      <p><b>VD:</b> <i><%= word.example_en %></i><br><%= word.example_vi %></p>
      <div class="buttons-container">
        <input type="hidden" class="expected-word" value="<%= word.word_text %>">
        <button onclick="speakWord('<%= word.word_text %>')">üîä Nghe ph√°t √¢m</button>
        <button onclick="recordAndSend(this)">üéôÔ∏è N√≥i th·ª≠</button>
        <button class="replay-button" onclick="replayRecording(this)" disabled>üîÅ Nghe l·∫°i</button>
      </div>
      <progress class="progress-bar" value="0" max="100"></progress>
      <div class="result"></div>
    </div>
  <% }); %>

  <h2>L·ªãch s·ª≠ luy·ªán t·∫≠p</h2>
  <table id="historyTable">
    <thead>
      <tr><th>T·ª´</th><th>B·∫°n n√≥i</th><th>ƒêi·ªÉm</th><th>K·∫øt qu·∫£</th></tr>
    </thead>
    <tbody></tbody>
  </table>

  <script>
    async function speakWord(word) {
      const response = await fetch('/tts/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ word })
      });
      const data = await response.json();
      if (data.url) new Audio(data.url).play();
      else alert('Kh√¥ng ph√°t ƒë∆∞·ª£c √¢m thanh');
    }

    function replayRecording(button) {
      const card = button.closest('.word-card');
      const blobUrl = card.dataset.blobUrl;
      if (blobUrl) new Audio(blobUrl).play();
    }

    async function recordAndSend(button) {
      const card = button.closest('.word-card');
      const expectedWord = card.querySelector('.expected-word').value;
      const resultElem = card.querySelector('.result');
      const progressBar = card.querySelector('.progress-bar');
      const replayButton = card.querySelector('.replay-button');

      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const mediaRecorder = new MediaRecorder(stream);
        const chunks = [];

        mediaRecorder.ondataavailable = e => chunks.push(e.data);
        mediaRecorder.onstop = async () => {
          const blob = new Blob(chunks, { type: 'audio/wav' });
          const url = URL.createObjectURL(blob);
          card.dataset.blobUrl = url;
          replayButton.disabled = false;

          const form = new FormData();
          form.append('audio', blob, 'voice.wav');
          form.append('expected', expectedWord);

          resultElem.textContent = '‚è≥ ƒêang x·ª≠ l√Ω...';
          resultElem.className = 'result';
          progressBar.style.display = 'block';
          progressBar.value = 20;

          try {
            const res = await fetch('/pronounce/upload', {
              method: 'POST',
              body: form
            });
            progressBar.value = 70;
            const data = await res.json();
            const isCorrect = data.isCorrect;
            const score = data.score;
            const userSaid = data.userSaid;

            resultElem.textContent = `${isCorrect ? '‚úÖ ƒê√∫ng' : '‚ùå Sai'} | "${userSaid}" (${score}/100)`;
            resultElem.className = 'result ' + (isCorrect ? 'correct' : 'incorrect');
            progressBar.value = 100;

            const row = document.createElement('tr');
            row.innerHTML = `<td>${expectedWord}</td><td>${userSaid}</td><td>${score}</td><td>${isCorrect ? '‚úÖ' : '‚ùå'}</td>`;
            document.querySelector('#historyTable tbody').appendChild(row);

          } catch (err) {
            resultElem.textContent = '‚ùå L·ªói khi g·ª≠i';
            resultElem.className = 'result incorrect';
          }
          setTimeout(() => progressBar.style.display = 'none', 1000);
        };

        resultElem.textContent = 'üé§ Ghi √¢m trong 4 gi√¢y...';
        mediaRecorder.start();
        setTimeout(() => mediaRecorder.stop(), 4000);

      } catch (err) {
        alert('L·ªói ghi √¢m: ' + err.message);
      }
    }
  </script>
</body>
</html>
