<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Quiz</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary-color: #007bff;
      --accent-color: #28a745;
      --info-color: #17a2b8;
      --background-gradient: linear-gradient(135deg, #e3f2fd, #bbdefb);
      --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      --border-radius: 8px;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background: var(--background-gradient);
      padding: 20px;
      color: #333;
      min-height: 100vh;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
    }

    h1 {
      text-align: center;
      color: var(--primary-color);
      margin-bottom: 20px;
      font-weight: 600;
    }

    /* Video Player */
    #videoPlayer {
      max-width: 100%;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow);
      margin-bottom: 10px;
    }

    #currentTime {
      text-align: center;
      font-size: 1.1rem;
      color: #555;
      margin-bottom: 20px;
    }

    /* Controls */
    #controls {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: center;
      background: white;
      padding: 15px;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow);
      margin-bottom: 20px;
    }

    #controls label {
      margin: 0;
      font-size: 1rem;
      color: #333;
    }

    #controls input[type="radio"],
    #controls input[type="checkbox"] {
      margin-right: 8px;
      accent-color: var(--primary-color);
    }

    #voiceSelect {
      padding: 8px;
      border-radius: 6px;
      border: 1px solid #ddd;
      font-size: 1rem;
      cursor: pointer;
    }

    /* Activity Links */
    .activity-links {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      justify-content: center;
      margin-bottom: 20px;
    }

    .activity-links a {
      display: inline-flex;
      align-items: center;
      padding: 12px 24px;
      color: white;
      text-decoration: none;
      font-size: 1rem;
      font-weight: 600;
      border-radius: var(--border-radius);
      transition: transform 0.2s, box-shadow 0.2s;
      box-shadow: var(--shadow);
    }

    .activity-links a:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
    }

    .activity-links a.pronunciation {
      background-color: var(--info-color);
    }

    .activity-links a.game {
      background-color: var(--accent-color);
    }

    .activity-links a.quiz {
      background-color: var(--primary-color);
    }

    .activity-links a.qa {
      background-color: #ff6f61;
    }

    /* Sticky Question Panel */
    #stickyQuestion {
      position: fixed;
      top: 20px;
      right: 20px;
      width: 320px;
      background: white;
      border-radius: var(--border-radius);
      padding: 20px;
      box-shadow: var(--shadow);
      display: none;
      z-index: 1000;
      animation: slideIn 0.3s ease-out;
    }

    #stickyQuestion.show {
      display: block;
    }

    #questionTitle {
      color: var(--primary-color);
      margin-bottom: 10px;
    }

    #questionText {
      font-size: 1.1rem;
      margin-bottom: 15px;
    }

    .option-btn {
      display: block;
      width: 100%;
      padding: 10px;
      margin: 5px 0;
      background: #f8f9fa;
      border: 1px solid #ddd;
      border-radius: 6px;
      font-size: 1rem;
      cursor: pointer;
      transition: background 0.2s;
    }

    .option-btn:hover {
      background: #e9ecef;
    }

    .recording {
      background-color: #ff4444 !important;
      color: white !important;
    }

    #feedback {
      margin-top: 10px;
      font-weight: 600;
    }

    #loadingSpinner {
      display: none;
    }

    #loadingSpinner.show {
      display: inline-block;
    }

    /* Answer History */
    #answerHistory {
      list-style: none;
      padding: 0;
      max-width: 800px;
      margin: 0 auto;
    }

    #answerHistory li {
      background: white;
      padding: 15px;
      margin-bottom: 10px;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow);
      font-size: 1rem;
      transition: transform 0.2s;
    }

    #answerHistory li:hover {
      transform: translateX(5px);
    }

    /* Animations */
    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      #stickyQuestion {
        width: 90%;
        right: 5%;
      }

      .activity-links a {
        flex: 1 1 100%;
        justify-content: center;
      }

      #controls {
        flex-direction: column;
        align-items: flex-start;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Interactive Quiz</h1>
    <video id="videoPlayer" src="<%= videoPath || '/videos/sample.mp4' %>" controls width="640" height="360"></video>
    <div id="currentTime">Current Time: 0:00</div>
    <div class="activity-links">
      <a href="/practice-pronunciation" class="pronunciation">
        üó£Ô∏è Luy·ªán ph√°t √¢m t·ª´ v·ª±ng
      </a>
      <a href="/game/word-assemble" class="game">
        üéÆ Tr√≤ ch∆°i gh√©p t·ª´
      </a>
      <a href="/game/context-clue" class="game">
        üéÆ Tr√≤ ch∆°i ƒëo√°n t·ª´ qua ng·ªØ c·∫£nh
      </a>
      <a href="/game/match-word-meaning" class="game">
        üéÆ Tr√≤ ch∆°i n·ªëi t·ª´ v·ªõi nghƒ©a ti·∫øng Vi·ªát
      </a>
      <a href="/question/<%= video.subject_id %>" class="quiz">
        üéØ L√†m b√†i Quiz t∆∞∆°ng t√°c
      </a>
      <a href="/practice-questionanswer" class="qa">
        üéÆ H·ªèi ƒë√°p ti·∫øng Anh
      </a>
    </div>
    <div id="controls">
      <label><input type="radio" name="quizMode" value="multiple" checked> Multiple Choice</label>
      <label><input type="radio" name="quizMode" value="sentence"> Sentence Pronunciation</label>
      <label><input type="checkbox" id="interactiveToggle" checked> Interactive Mode</label>
      <select id="voiceSelect">
        <option value="default">Default Voice</option>
      </select>
    </div>
    <div id="stickyQuestion">
      <h3 id="questionTitle">Question</h3>
      <p id="questionText"></p>
      <input type="hidden" id="expectedSentence">
      <div id="options"></div>
      <button id="recordBtn" class="btn btn-primary">Record</button>
      <button id="skipBtn" class="btn btn-secondary">Skip</button>
      <div id="feedback"></div>
      <div id="loadingSpinner" class="spinner-border text-primary" role="status"></div>
    </div>
    <h4>Answer History</h4>
    <ul id="answerHistory" class="list-group"></ul>
  </div>

  <script>
    const video = document.getElementById('videoPlayer');
    const currentTimeDisplay = document.getElementById('currentTime');
    const stickyQuestion = document.getElementById('stickyQuestion');
    const questionTitle = document.getElementById('questionTitle');
    const questionText = document.getElementById('questionText');
    const optionsDiv = document.getElementById('options');
    const expectedSentence = document.getElementById('expectedSentence');
    const recordBtn = document.getElementById('recordBtn');
    const skipBtn = document.getElementById('skipBtn');
    const feedback = document.getElementById('feedback');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const answerHistory = document.getElementById('answerHistory');
    const modeInputs = document.getElementsByName('quizMode');
    const interactiveToggle = document.getElementById('interactiveToggle');
    const voiceSelect = document.getElementById('voiceSelect');

    // Load quiz data
    const rawData = <%- JSON.stringify(quizData || []) %>;
    const sentences = <%- JSON.stringify(quizSentenceData || []) %>;
    const quizQuestions = [];

    // Normalization functions
    function normalizeVN(text) {
      if (!text) return "";
      return text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").trim();
    }

    function normalizeEN(text) {
      if (!text) return "";
      return text.toLowerCase().trim();
    }

    function getNestedProperty(obj, path) {
      return path.split('.').reduce((current, key) => current && current[key], obj);
    }

    // Populate quizQuestions array from rawData
    rawData.forEach(entry => {
      entry.quiz_questions.forEach(q => {
        q.timestamps.forEach(ts => {
          const match = ts.match(/(\d+):(\d+):(\d+),(\d+)/);
          if (match) {
            const [, h, m, s, ms] = match.map(Number);
            const timeInSeconds = h * 3600 + m * 60 + s + ms / 1000;

            let correctAnswer;
            let displayCorrectAnswer;
            let englishWordForPronunciation = entry.word;
            let options = q.options || [];

            if (q.type === 'multiple_choice_meaning_vn') {
              correctAnswer = normalizeVN(q.correct_answer_text || "");
              displayCorrectAnswer = q.correct_answer_text || "";
            } else if (q.type === 'copy_word') {
              correctAnswer = normalizeVN(entry.word).repeat(3);
              displayCorrectAnswer = entry.word.repeat(3);
            } else if (q.type === 'example_vn_fill_blank') {
              correctAnswer = normalizeVN(entry.word);
              displayCorrectAnswer = entry.word;
            } else if (q.type === 'part_of_speech_vn') {
              correctAnswer = normalizeVN(entry.part_of_speech_vn);
              displayCorrectAnswer = entry.part_of_speech_vn;
            } else if (q.type === 'pronunciation_check') {
              correctAnswer = normalizeEN(entry.word);
              displayCorrectAnswer = entry.word;
            } else if (q.type === 'translate_sentence_en_to_vn') {
              englishWordForPronunciation = q.english_sentence || "";
              correctAnswer = normalizeVN(q.correct_answer_text || "");
              displayCorrectAnswer = q.correct_answer_text || "";
            } else if (q.answer_source_field) {
              try {
                const originalValue = getNestedProperty(entry, q.answer_source_field);
                correctAnswer = normalizeVN(originalValue);
                displayCorrectAnswer = originalValue;
              } catch (e) {
                console.error(`Error getting answer for ${entry.word} from ${q.answer_source_field}:`, e);
                correctAnswer = "";
                displayCorrectAnswer = "";
              }
            } else {
              correctAnswer = "";
              displayCorrectAnswer = "";
            }

            quizQuestions.push({
              time: timeInSeconds,
              type: q.type,
              question: q.question_template
                .replace('{word}', entry.word)
                .replace('{part_of_speech}', entry.part_of_speech)
                .replace('{part_of_speech_vn}', entry.part_of_speech_vn)
                .replace('{english_sentence}', q.english_sentence || ''),
              correctAnswer,
              displayCorrectAnswer,
              options,
              englishWordForPronunciation
            });
          }
        });
      });
    });

    // Debug logging
    console.log('Quiz Questions:', quizQuestions);
    console.log('Sentences:', sentences);

    // Fallback for no data
    if (!quizQuestions.length && !sentences.length) {
      console.warn('No quiz data available');
      feedback.textContent = 'No quiz questions or sentences available';
      feedback.style.color = 'orange';
    }

    let mediaRecorder;
    let audioChunks = [];
    let isRecording = false;
    const displayedQuestions = new Set();
    const shownEndTimes = new Set();
    let currentMode = 'multiple';

    // Update current time
    video.addEventListener('timeupdate', () => {
      const currentTime = video.currentTime;
      const minutes = Math.floor(currentTime / 60);
      const seconds = Math.floor(currentTime % 60).toString().padStart(2, '0');
      currentTimeDisplay.textContent = `Current Time: ${minutes}:${seconds}`;

      if (!interactiveToggle.checked || currentMode !== 'multiple') return;

      const currentQuestion = quizQuestions.find(q => 
        ['multiple_choice_meaning_vn', 'translate_sentence_en_to_vn'].includes(q.type) &&
        q.time && Math.abs(q.time - currentTime) < 1.0 && 
        !displayedQuestions.has(q.question)
      );

      if (currentQuestion) {
        console.log('Displaying question:', currentQuestion);
        questionTitle.textContent = 'Question: Choose the Correct Answer';
        questionText.textContent = currentQuestion.question || 'No question available';
        expectedSentence.value = (currentQuestion.correctAnswer || '').toLowerCase().trim();
        optionsDiv.innerHTML = '';
        (currentQuestion.options || []).forEach(option => {
          const btn = document.createElement('button');
          btn.className = 'option-btn';
          btn.textContent = option.textContent || option;
          btn.onclick = () => checkAnswer(option.textContent || option, currentQuestion.displayCorrectAnswer);
          optionsDiv.appendChild(btn);
        });
        recordBtn.style.display = 'none';
        skipBtn.style.display = 'inline-block';
        stickyQuestion.classList.add('show');
        displayedQuestions.add(currentQuestion.question);
        video.pause();
      }
    });
    // Handle sentence mode
       const sentenceInterval = setInterval(() => {
      if (!interactiveToggle.checked || currentMode !== 'sentence') return;

      const currentTime = video.currentTime;
      console.log('Checking sentences at time:', currentTime);

      let currentSentence = sentences.find(s => 
        s.end_time && Math.abs(Number(s.end_time) - currentTime) < 1.5 &&
        !shownEndTimes.has(s.end_time)
      );

      if (!currentSentence) {
        currentSentence = quizQuestions.find(q => 
          q.type === 'pronunciation_check' &&
          q.time && Math.abs(q.time - currentTime) < 1.5 &&
          !shownEndTimes.has(q.time)
        );
      }

      if (currentSentence) {
        console.log('Displaying sentence:', currentSentence);
        questionTitle.textContent = 'Question: Read the Sentence';
        //const sentenceText = `Read:`+currentSentence.sentence + `\n Vietnamese mean`+currentSentence.translation_vi || currentSentence.englishWordForPronunciation || 'No sentence available';
        const sentenceText = (currentSentence.sentence && currentSentence.translation_vi) 
        ? `Read: ${currentSentence.sentence}\nMean: ${currentSentence.translation_vi}`
        : currentSentence.englishWordForPronunciation || 'No sentence available';
        questionText.innerHTML = sentenceText.replace(/\n/g, '<br>');
        expectedSentence.value = normalizeEN(sentenceText);
        optionsDiv.innerHTML = '';
        recordBtn.style.display = 'inline-block';
        skipBtn.style.display = 'inline-block';
        stickyQuestion.classList.add('show');
        shownEndTimes.add(currentSentence.end_time || currentSentence.time);
        video.pause();
      }
    }, 100);

    // Reset on seek or end
    video.addEventListener('seeked', () => {
      displayedQuestions.clear();
      shownEndTimes.clear();
    });
    video.addEventListener('ended', () => {
      displayedQuestions.clear();
      shownEndTimes.clear();
    });

    // Mode toggle
    modeInputs.forEach(input => {
      input.addEventListener('change', () => {
        currentMode = input.value;
        console.log('Mode changed to:', currentMode);
        displayedQuestions.clear();
        shownEndTimes.clear();
        stickyQuestion.classList.remove('show');
        video.play();
      });
    });

    // Interactive toggle
    interactiveToggle.addEventListener('change', () => {
      console.log('Interactive toggle:', interactiveToggle.checked);
      if (!interactiveToggle.checked) {
        stickyQuestion.classList.remove('show');
        video.play();
      }
    });

    // Check multiple-choice answer
    function checkAnswer(selected, correct) {
      const isCorrect = normalizeVN(selected) === normalizeVN(correct);
      feedback.textContent = isCorrect ? '‚úÖ Correct!' : `‚ùå Incorrect! Correct answer: ${correct}`;
      feedback.style.color = isCorrect ? 'green' : 'red';

      const historyItem = document.createElement('li');
      historyItem.className = 'list-group-item';
      historyItem.textContent = `Question: "${questionText.textContent}" | Selected: "${selected}" | ${feedback.textContent}`;
      answerHistory.prepend(historyItem);

      setTimeout(() => {
        stickyQuestion.classList.remove('show');
        video.play();
      }, 2000);

      fetch('/save-quiz-result', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          question_text: questionText.textContent,
          correct_answer: correct,
          user_answer: selected,
          is_correct: isCorrect
        })
      }).catch(err => console.error('Error saving quiz result:', err));
    }

    // Handle recording
    recordBtn.addEventListener('click', async () => {
      if (!isRecording) {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
          mediaRecorder = new MediaRecorder(stream);
          audioChunks = [];

          mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
          mediaRecorder.onstop = async () => {
            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
            const formData = new FormData();
            formData.append('audio', audioBlob, 'user_audio.wav');
            formData.append('expected', expectedSentence.value);

            try {
              loadingSpinner.classList.add('show');
              feedback.textContent = '';
              const response = await fetch('/pronounce/upload', {
                method: 'POST',
                body: formData
              });
              const result = await response.json();
              loadingSpinner.classList.remove('show');

              feedback.textContent = result.feedback || `Accuracy: ${result.score || 0}%`;
              feedback.style.color = result.isCorrect ? 'green' : 'red';

              const historyItem = document.createElement('li');
              historyItem.className = 'list-group-item';
              historyItem.textContent = `Sentence: "${result.expected}" | You said: "${result.userSaid || 'Not recognized'}" | ${feedback.textContent}`;
              answerHistory.prepend(historyItem);

              setTimeout(() => {
                stickyQuestion.classList.remove('show');
                video.play();
              }, 2000);
            } catch (err) {
              loadingSpinner.classList.remove('show');
              feedback.textContent = 'Error sending audio to server. Mock response: Accuracy 80%';
              feedback.style.color = 'orange';
              console.error('Recording error:', err);

              const historyItem = document.createElement('li');
              historyItem.className = 'list-group-item';
              historyItem.textContent = `Sentence: "${expectedSentence.value}" | Mocked: Accuracy 80%`;
              answerHistory.prepend(historyItem);

              setTimeout(() => {
                stickyQuestion.classList.remove('show');
                video.play();
              }, 2000);
            }
          };

          mediaRecorder.start();
          recordBtn.textContent = 'Stop Recording';
          recordBtn.classList.add('recording');
          isRecording = true;
        } catch (err) {
          feedback.textContent = 'Error accessing microphone';
          feedback.style.color = 'red';
          console.error('Microphone error:', err);
        }
      } else {
        mediaRecorder.stop();
        recordBtn.textContent = 'Record';
        recordBtn.classList.remove('recording');
        isRecording = false;
      }
    });

    // Handle skip button
    skipBtn.addEventListener('click', () => {
      const historyItem = document.createElement('li');
      historyItem.className = 'list-group-item';
      historyItem.textContent = `${currentMode === 'multiple' ? 'Question' : 'Sentence'}: "${questionText.textContent}" | Skipped`;
      answerHistory.prepend(historyItem);

      stickyQuestion.classList.remove('show');
      video.play();
    });

    // Voice select placeholder
    voiceSelect.addEventListener('change', () => {
      console.log('Selected voice:', voiceSelect.value);
      // TODO: Implement text-to-speech if needed
    });
  </script>
</body>
</html>